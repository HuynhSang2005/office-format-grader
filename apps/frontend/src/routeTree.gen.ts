/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UploadRouteImport } from './routes/upload'
import { Route as RubricsRouteImport } from './routes/rubrics'
import { Route as LoginRouteImport } from './routes/login'
import { Route as HistoryRouteImport } from './routes/history'
import { Route as GradingRouteImport } from './routes/grading'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as RubricsNewRouteImport } from './routes/rubrics/new'
import { Route as RubricsRubricIdEditRouteImport } from './routes/rubrics/$rubricId.edit'

const UploadRoute = UploadRouteImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => rootRouteImport,
} as any)
const RubricsRoute = RubricsRouteImport.update({
  id: '/rubrics',
  path: '/rubrics',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const HistoryRoute = HistoryRouteImport.update({
  id: '/history',
  path: '/history',
  getParentRoute: () => rootRouteImport,
} as any)
const GradingRoute = GradingRouteImport.update({
  id: '/grading',
  path: '/grading',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const RubricsNewRoute = RubricsNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => RubricsRoute,
} as any)
const RubricsRubricIdEditRoute = RubricsRubricIdEditRouteImport.update({
  id: '/$rubricId/edit',
  path: '/$rubricId/edit',
  getParentRoute: () => RubricsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/grading': typeof GradingRoute
  '/history': typeof HistoryRoute
  '/login': typeof LoginRoute
  '/rubrics': typeof RubricsRouteWithChildren
  '/upload': typeof UploadRoute
  '/rubrics/new': typeof RubricsNewRoute
  '/rubrics/$rubricId/edit': typeof RubricsRubricIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/grading': typeof GradingRoute
  '/history': typeof HistoryRoute
  '/login': typeof LoginRoute
  '/rubrics': typeof RubricsRouteWithChildren
  '/upload': typeof UploadRoute
  '/rubrics/new': typeof RubricsNewRoute
  '/rubrics/$rubricId/edit': typeof RubricsRubricIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/grading': typeof GradingRoute
  '/history': typeof HistoryRoute
  '/login': typeof LoginRoute
  '/rubrics': typeof RubricsRouteWithChildren
  '/upload': typeof UploadRoute
  '/rubrics/new': typeof RubricsNewRoute
  '/rubrics/$rubricId/edit': typeof RubricsRubricIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/grading'
    | '/history'
    | '/login'
    | '/rubrics'
    | '/upload'
    | '/rubrics/new'
    | '/rubrics/$rubricId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/grading'
    | '/history'
    | '/login'
    | '/rubrics'
    | '/upload'
    | '/rubrics/new'
    | '/rubrics/$rubricId/edit'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/grading'
    | '/history'
    | '/login'
    | '/rubrics'
    | '/upload'
    | '/rubrics/new'
    | '/rubrics/$rubricId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  GradingRoute: typeof GradingRoute
  HistoryRoute: typeof HistoryRoute
  LoginRoute: typeof LoginRoute
  RubricsRoute: typeof RubricsRouteWithChildren
  UploadRoute: typeof UploadRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/upload': {
      id: '/upload'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof UploadRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rubrics': {
      id: '/rubrics'
      path: '/rubrics'
      fullPath: '/rubrics'
      preLoaderRoute: typeof RubricsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/history': {
      id: '/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/grading': {
      id: '/grading'
      path: '/grading'
      fullPath: '/grading'
      preLoaderRoute: typeof GradingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rubrics/new': {
      id: '/rubrics/new'
      path: '/new'
      fullPath: '/rubrics/new'
      preLoaderRoute: typeof RubricsNewRouteImport
      parentRoute: typeof RubricsRoute
    }
    '/rubrics/$rubricId/edit': {
      id: '/rubrics/$rubricId/edit'
      path: '/$rubricId/edit'
      fullPath: '/rubrics/$rubricId/edit'
      preLoaderRoute: typeof RubricsRubricIdEditRouteImport
      parentRoute: typeof RubricsRoute
    }
  }
}

interface RubricsRouteChildren {
  RubricsNewRoute: typeof RubricsNewRoute
  RubricsRubricIdEditRoute: typeof RubricsRubricIdEditRoute
}

const RubricsRouteChildren: RubricsRouteChildren = {
  RubricsNewRoute: RubricsNewRoute,
  RubricsRubricIdEditRoute: RubricsRubricIdEditRoute,
}

const RubricsRouteWithChildren =
  RubricsRoute._addFileChildren(RubricsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  GradingRoute: GradingRoute,
  HistoryRoute: HistoryRoute,
  LoginRoute: LoginRoute,
  RubricsRoute: RubricsRouteWithChildren,
  UploadRoute: UploadRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
