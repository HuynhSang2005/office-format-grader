generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  customRubrics CustomRubric[]
  gradeResults  GradeResult[]
  ungradedFiles UngradedFile[]

  @@map("users")
}

model GradeResult {
  id          String   @id @default(uuid())
  userId      Int
  filename    String
  fileType    String
  totalPoints Float
  byCriteria  String
  gradedAt    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("grade_results")
}

model CustomRubric {
  id        String   @id @default(uuid())
  ownerId   Int
  name      String
  content   String
  total     Float
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@map("custom_rubrics")
}

model UngradedFile {
  id        String   @id
  userId    Int
  filename  String
  fileType  String
  fileSize  Int
  uploadedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ungraded_files")
}

model Criterion {
  id          String   @id @default(uuid())
  name        String
  description String
  detectorKey String
  maxPoints   Float
  levels      String   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("criteria")
}